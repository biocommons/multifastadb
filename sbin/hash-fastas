#!/usr/bin/env python

"""generates TSV of md5, sdha1, sha512, length, accession, and
sequences excerpt for fasta files

"""

from __future__ import print_function

import hashlib
import logging
import sqlite3
import sys

from colorclass import Color
from etaprogress.progress import ProgressBar
from multifastadb import MultiFastaDB

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

def excerpt(s, w=25):
    ellipsis = '...'
    return s if len(s) <= 2 * w + len(ellipsis) else s[:w] + ellipsis + s[-w:]


if __name__ == "__main__":
    use_db = True

    mfdb = MultiFastaDB(sources=sys.argv[1:], use_meta_index=True)

    pbar = ProgressBar(len(mfdb.references))
    pbar.bar.CHAR_FULL = Color('{autoyellow}#{/autoyellow}')
    pbar.bar.CHAR_LEADING = Color('{autoyellow}#{/autoyellow}')
    pbar.bar.CHAR_LEFT_BORDER = Color('{autoblue}[{/autoblue}')
    pbar.bar.CHAR_RIGHT_BORDER = Color('{autoblue}]{/autoblue}')

    for r in mfdb.references:
        sources = mfdb.where_is(r)
        src_seq_map = {src: src[1][r].upper() for src in sources}
        seqs = set(src_seq_map.values())
        if len(seqs) > 1:
            logger.warn("{r}: {n} distinct sequences".format(r=r,n=len(seqs)))
        seq_md5_map = {seq: hashlib.md5(seq.encode("ascii")).hexdigest() for seq in seqs}
        for src in sources:
            seq = src_seq_map[src]
            print("\t".join([seq_md5_map[seq], str(len(seq)), r, excerpt(seq), src[0]]))

        pbar.numerator += 1
        if pbar.numerator % 250 == 0:
            sys.stderr.write('\r' + str(pbar))

    sys.stderr.write(str(pbar) + '\n')
    sys.stderr.flush()    
